#-------------------------------------------------------------------------------
# Path to your dotfiles installation.
#-------------------------------------------------------------------------------
export DOTFILES=$HOME/dotfiles

#-------------------------------------------------------------------------------
# Path to Dropbox root folder (real-time synced)
#-------------------------------------------------------------------------------
export DROPBOX=$HOME/Library/CloudStorage/Dropbox/

#-------------------------------------------------------------------------------
# Path to oh-my-zsh installation
#-------------------------------------------------------------------------------
export ZSH=$HOME/.oh-my-zsh

#-------------------------------------------------------------------------------
# Preferred editor for local and remote sessions
#-------------------------------------------------------------------------------
export EDITOR='nvim'

#-------------------------------------------------------------------------------
# Compilation flags
#-------------------------------------------------------------------------------

# export ARCHFLAGS="-arch x86_64"

#-------------------------------------------------------------------------------
# Status prompt configuration (powerlevel9k) - https://github.com/Powerlevel9k/powerlevel9k
# Defaults for left + right are below
#-------------------------------------------------------------------------------

export POWERLEVEL9K_CUSTOM_KUBE_PS1='kube_ps1'
# export POWERLEVEL9K_CONTEXT_TEMPLATE="(context dir vcs custom_kube_ps1)"
export POWERLEVEL9K_CONTEXT_TEMPLATE="%n@"
export POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir vcs custom_kube_ps1)
# export POWERLEVEL9K_CONTEXT_TEMPLATE="(context dir vcs custom_kube_ps1)"
# export POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS="(status root_indicator background_jobs history time)"

export POWERLEVEL9K_MODE="nerdfont-complete"
export POWERLEVEL9K_PROMPT_ON_NEWLINE=true
export POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

#-------------------------------------------------------------------------------
# FZF settings
#-------------------------------------------------------------------------------
# m : multi-select with TAB
# reverse layout : filter prompt on TOP not bottom
# inline-info : filtered result count shown INLINE with filter prompt
# border : draw border around fuzzy finder
# key bind : bind keys WHILE in FZF to execute without leaving FZF
# * Press F1 to open the file with less without leaving fzf
# * Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)
export FZF_DEFAULT_OPTS="-m --layout=reverse --inline-info --border --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort'"
export FZF_DEFAULT_COMMAND="rg --files --no-ignore-vcs --hidden $WORKDIR_PATHS"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd . $HOME --hidden --no-ignore --type d"

#-------------------------------------------------------------------------------
# For brew cask available options
# @see. https://github.com/caskroom/homebrew-cask/blob/master/USAGE.md#options
#-------------------------------------------------------------------------------
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

#-------------------------------------------------------------------------------
# Export language settings
#-------------------------------------------------------------------------------
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

#-------------------------------------------------------------------------------
# (workaround) pyenv 'gettext' error - shims do not work with gettext
#-------------------------------------------------------------------------------
export GIT_INTERNAL_GETTEXT_TEST_FALLBACKS=1

#-------------------------------------------------------------------------------
# Zlib flag export (Pyenv install 'zlib not found' error)
#-------------------------------------------------------------------------------

# For compilers to find zlib you may need to set:
export LDFLAGS="${LDFLAGS} -L/usr/local/opt/zlib/lib"
export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/zlib/include"

# For pkg-config to find zlib you may need to set:
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig"

#-------------------------------------------------------------------------------
# Java home (class path for .class files path)
#-------------------------------------------------------------------------------
export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-8.jdk/Contents/Home

#-------------------------------------------------------------------------------
# Javascript (Node, Deno, etc)
#-------------------------------------------------------------------------------
export DENO_INSTALL="/Users/hanklee/.deno"

#-------------------------------------------------------------------------------
# Tmux fzf gnu-sed (gsed) path
#-------------------------------------------------------------------------------
export TMUX_FZF_SED="/usr/local/bin/gsed"

#-------------------------------------------------------------------------------
# Python + Pyenv setup
#-------------------------------------------------------------------------------
# No __pycache__
export PYTHONDONTWRITEBYTECODE=1
export PYENV_ROOT=$HOME/.pyenv

#-------------------------------------------------------------------------------
# Golang setup
#-------------------------------------------------------------------------------
export GOPATH="$HOME/go"
export GOROOT="$(brew --prefix golang)/libexec"
